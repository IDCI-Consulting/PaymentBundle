{% include '@IDCIPayment/Gateway/apple_pay/button.html.twig' %}
<script src="https://applepay.cdn-apple.com/jsapi/v1.1.0/apple-pay-sdk.js"></script>
<script>
    function createApplePaySession() {
        var applePayPaymentRequest = {{ apple_pay_payment_request|filter((v, k) => k != 'customData')|json_encode|raw }};
        var customData = {{ apple_pay_payment_request.customData|json_encode|raw }};
        var selectedShippingMethod = {};
        var orderAmount = '{{ apple_pay_payment_request.total.amount }}';

        var appleSession = new ApplePaySession({{ version }}, applePayPaymentRequest);

        // Validate payment
        appleSession.onvalidatemerchant = function (event) {
            let headers = new Headers();
            headers.append('X-Requested-With', 'XMLHttpRequest');
            headers.append('Content-Type', 'application/json; charset=utf-8');

            let options = {
                method: 'POST',
                body: JSON.stringify({ validationUrl: event.validationURL, paymentRequest: applePayPaymentRequest, customData: customData}),
                credentials: 'include',
                headers: headers
            };

            fetch('{{ path("idci_payment_apple_pay_payment_gateway_create_session", {"configurationAlias": configuration_alias}) }}', options).then((response) => {
                return response.json();
            }).then((data) => {
                applePayPaymentRequest = data.paymentRequest;
                customData = data.customData;
                appleSession.completeMerchantValidation(data.sessionData);
            }).catch(function (error) {
                console.error('Merchant validation unsuccessful: ' + JSON.stringify(error));

                appleSession.abort();
            });
        };

        appleSession.onpaymentmethodselected = function (event) {
            appleSession.completePaymentMethodSelection(applePayPaymentRequest.total, applePayPaymentRequest.lineItems ?? []);
        };

        appleSession.onshippingcontactselected = function (event) {
            appleSession.completeShippingContactSelection(ApplePaySession.STATUS_SUCCESS, applePayPaymentRequest.shippingMethods ?? [], applePayPaymentRequest.total, applePayPaymentRequest.lineItems ?? []);
        };

        appleSession.onshippingmethodselected = function (event) {
            selectedShippingMethod = event.shippingMethod.identifier;

            let total = applePayPaymentRequest.total;
            total.amount = (parseFloat(orderAmount) + parseFloat(event.shippingMethod.amount)).toFixed(2);

            appleSession.completeShippingMethodSelection(ApplePaySession.STATUS_SUCCESS, total, applePayPaymentRequest.lineItems ?? []);
        }

        appleSession.onpaymentauthorized = function (event) {
            var tokenData = {
                paymentRequest: applePayPaymentRequest,
                paymentToken: event.payment.token,
                billingContact: event.payment.billingContact ?? null,
                shippingContact: event.payment.shippingContact ?? null,
                selectedShippingMethod: selectedShippingMethod,
                customData: customData
            };

            let headers = new Headers();
            headers.append('X-Requested-With', 'XMLHttpRequest');
            headers.append('Content-Type', 'application/json; charset=utf-8');

            let options = {
                method: 'POST',
                body: JSON.stringify(tokenData),
                credentials: 'include',
                headers: headers
            };

            fetch('{{ path("idci_payment_payment_gateway_callback", {"configuration_alias": configuration_alias}) }}', options).then((response) => {
                return response.json();
            }).then((data) => {
                appleSession.completePayment('approved' === data.status ? ApplePaySession.STATUS_SUCCESS : ApplePaySession.STATUS_FAILURE);

                if ('approved' === data.status) {
                    if (typeof appleSession.onpaymentsuccess != 'function') {
                        window.location.href = '{{ return_url }}';

                        return;
                    }

                    return appleSession.onpaymentsuccess({
                        'amount': orderAmount,
                        'request': applePayPaymentRequest,
                        'session': appleSession,
                        'customData': customData,
                        'data': data
                    });
                }

                if (typeof appleSession.onpaymentfailed != 'function') {
                    window.location.href = '{{ return_url }}';

                    return;
                }

                return appleSession.onpaymentfailed({
                    'amount': orderAmount,
                    'request': applePayPaymentRequest,
                    'session': appleSession,
                    'customData': customData,
                    'data': data
                });
            }).catch(function (error) {
                console.error('Payment validation unsuccessful: ' + error);

                appleSession.abort();
            });
        }

        if (typeof ApplePaySession.onsessioncreate == 'function') {
            ApplePaySession.onsessioncreate({
                'amount': orderAmount,
                'request': applePayPaymentRequest,
                'session': appleSession,
                'customData': customData,
            });
        }

        appleSession.begin();
    }

    function initApplePayButton() {
        if (!window.ApplePaySession || ApplePaySession.canMakePayments() !== true) {
            return;
        }

        document.querySelectorAll('.apple-pay-button').forEach(function (button) {
            if (button.classList.contains('initialized')) {
                return;
            }

            button.classList.add('initialized');
            button.style.display = 'block';

            button.addEventListener('click', function () {
                createApplePaySession();
            })
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        initApplePayButton();
    })

    var observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.addedNodes.length >= 1) {
                for (var i = 0; i < mutation.addedNodes.length; i++) {
                    if (undefined !== mutation.addedNodes[i].localName) {
                        if (mutation.addedNodes[i].querySelectorAll('.apple-pay-button:not(.initialized)').length !== 0) {
                            initApplePayButton();
                        };
                    }
                }
            }
        });
    });

    observer.observe(document.body, { attributes: false, childList: true, characterData: false, subtree: true });
</script>